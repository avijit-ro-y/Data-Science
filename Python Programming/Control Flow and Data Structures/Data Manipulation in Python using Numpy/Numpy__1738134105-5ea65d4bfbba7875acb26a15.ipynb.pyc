{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3n5Mv43IMCka"
      },
      "source": [
        "# NumPy Quickstart"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xvOduwMbMCkc",
        "tags": []
      },
      "source": [
        "## Installing NumPy\n",
        "To install NumPy, we strongly recommend using a scientific Python distribution. If you’re looking for the full instructions for installing NumPy on your operating system, see Installing NumPy.\n",
        "\n",
        "If you already have Python, you can install NumPy with:\n",
        "\n",
        "```conda install numpy```  \n",
        "  \n",
        "or\n",
        "\n",
        "```pip install numpy```  \n",
        "  \n",
        "If you don’t have Python yet, you might want to consider using Anaconda. It’s the easiest way to get started. The good thing about getting this distribution is the fact that you don’t need to worry too much about separately installing NumPy or any of the major packages that you’ll be using for your data analyses, like pandas, Scikit-Learn, etc."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "No25zjwjMCke",
        "outputId": "109131da-baff-4c6e-c0cd-2795a7765202",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.26.4\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "print(np.__version__)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IW2i8bJiMCkf",
        "tags": []
      },
      "source": [
        "# The Basics\n",
        "NumPy’s main object is the homogeneous multidimensional array. It is a table of elements (usually numbers), all of the same type, indexed by a tuple of non-negative integers. In NumPy dimensions are called axes."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list(range(0, 10, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1BFbvFlzWc0w",
        "outputId": "bc2c9e82-b801-4ab6-8e87-47a0522c9baf"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 2, 4, 6, 8]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.arange(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VKKCaZJzP82j",
        "outputId": "2ef06aad-1a51-4007-b123-19216ed3a62a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "fACZt2U3MCkf",
        "outputId": "8d198749-d1f5-4313-f80e-8528c676d293",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3,  4],\n",
              "       [ 5,  6,  7,  8,  9],\n",
              "       [10, 11, 12, 13, 14]])"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "a = np.arange(15).reshape(3, 5)\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Swj2JX0pMCkf",
        "outputId": "3eb4b775-0c1e-4fe9-b0e8-febe29113421"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "execution_count": 328,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "type(a)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z9ZuT-xCMCkg",
        "outputId": "3890e0ea-d9ba-4602-d0de-2b7a1ee17f42"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "[\n",
        "    [ 0,  1,  2,  3,  4],\n",
        "    [ 5,  6,  7,  8,  9],\n",
        "    [10, 11, 12, 13, 14]\n",
        "]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "o6pzz_AsMCkg",
        "outputId": "04967e19-ca56-42a0-c073-fde0f3a0a1c4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "a.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "7yCGXFvoMCkh",
        "outputId": "1c16c455-a4da-4f06-c538-7f312e8394fa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "a.ndim # the number of axes (dimensions) of the array"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "W-dQ4y8pMCkh",
        "outputId": "640e2785-3a17-4d11-f1fe-5f373c6f4a80",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('int64')"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "a.dtype # the dimensions of the array"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "vnCwAy80MCkh",
        "outputId": "23e71f6f-b4cc-4f33-a4e6-2f13a21861b8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "a.itemsize # the size in bytes of each element of the array"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xfDWgROuMCkh",
        "outputId": "0b0a70f5-042a-4176-aa2d-fa2313f6b592"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "execution_count": 331,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "type(a) # numpy.ndarray is an alias for numpy.array"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yLjFhIohMCki",
        "tags": []
      },
      "source": [
        "## Array Creation\n",
        "There are several ways to create arrays.\n",
        "\n",
        "For example, you can create an array from a regular Python list or tuple using the array function. The type of the resulting array is deduced from the type of the elements in the sequences."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "ZNc7tKVIMCki",
        "outputId": "47ceeb8b-679d-4a11-fbc7-1ef5cf702321",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 3, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "a = np.array([2, 3, 4])\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "d7svUHFjMCki",
        "outputId": "f63e4547-3909-42c8-c0ff-32150794c450",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('int64')"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "a.dtype"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "kxNnHsiSMCki",
        "outputId": "d1645141-9d32-4a3e-d67b-012e4a1b12c3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.2, 3.5, 5. ])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "b = np.array([1.2, 3.5, 5])\n",
        "b"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b[0] = 50"
      ],
      "metadata": {
        "id": "GWLF7NWQZJkE"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LDlgXaaRZW3_",
        "outputId": "fda2d5a5-b9c6-40d2-a2f8-4d4bb4fde87f"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([50. ,  3.5,  5. ])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "k9djfN2mMCki",
        "outputId": "7cbe9626-27cc-4b4b-e7da-7fe02b280da0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(dtype('float64'), 8)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "b.dtype, b.itemsize"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kc1Bl9gnMCki"
      },
      "source": [
        "A frequent error consists in calling array with multiple arguments, rather than providing a single sequence as an argument."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VW0BfzfYMCki",
        "outputId": "03c50301-fe13-4c1e-f6f8-7f635a13de91"
      },
      "outputs": [
        {
          "ename": "TypeError",
          "evalue": "array() takes from 1 to 2 positional arguments but 4 were given",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_27232\\2147504388.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m4\u001b[0m\u001b[1;33m)\u001b[0m    \u001b[1;31m# WRONG\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
            "\u001b[1;31mTypeError\u001b[0m: array() takes from 1 to 2 positional arguments but 4 were given"
          ]
        }
      ],
      "source": [
        "a = np.array(1, 2, 3, 4)    # WRONG\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BvMedhkxMCkj",
        "outputId": "20334681-db34-43f6-fdcc-f3b2ffacfb17"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1, 2, 3, 4])"
            ]
          },
          "execution_count": 339,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.array([1, 2, 3, 4])  # RIGHT\n",
        "a"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y9GX6_LaMCkj"
      },
      "source": [
        "The function zeros creates an array full of zeros, the function ones creates an array full of ones, and the function empty creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is float64, but it can be specified via the key word argument dtype."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TWPth6JOMCkj",
        "outputId": "36b4596e-ae83-43cd-c838-1796eec54ff1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0.]])"
            ]
          },
          "execution_count": 180,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.zeros((3, 4))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "jmQotyIVMCkj",
        "outputId": "19c3feac-d662-4131-f008-1a588d85fb08",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[1, 1, 1],\n",
              "        [1, 1, 1],\n",
              "        [1, 1, 1]],\n",
              "\n",
              "       [[1, 1, 1],\n",
              "        [1, 1, 1],\n",
              "        [1, 1, 1]],\n",
              "\n",
              "       [[1, 1, 1],\n",
              "        [1, 1, 1],\n",
              "        [1, 1, 1]]], dtype=int16)"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "np.ones((3, 3, 3), dtype=np.int16)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A7FzlijDMCkj",
        "outputId": "caef5d99-2a29-41d5-c529-a0f54c61ea62"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(dtype('float64'), 8)"
            ]
          },
          "execution_count": 341,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.ones((2, 3, 4))\n",
        "a.dtype,a.itemsize"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0tGAWYreMCkj"
      },
      "source": [
        "To create sequences of numbers, NumPy provides the arange function which is analogous to the Python built-in range, but returns an array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "nXJlcX8-MCkk",
        "outputId": "fde3560c-cf5c-4a9f-c861-494b9f1f8bdc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([10., 15., 20., 25.])"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "np.arange(start=10, stop=30, step=5, dtype='float64')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XvlnvWRkMCkk",
        "outputId": "82c3b79a-03f3-466f-d4c6-eec424a489c2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 10,   5,   0,  -5, -10, -15, -20, -25])"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.arange(10, -30, -5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_JdTDv1cMCkk"
      },
      "source": [
        "When arange is used with floating point arguments, it is generally not possible to predict the number of elements obtained, due to the finite floating point precision. For this reason, it is usually better to use the function linspace that receives as an argument the number of elements that we want, instead of the step:\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ArvgJyvEMCkk",
        "outputId": "8e9127fa-a29f-49a8-dcb2-2435a7a571bf"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  ])"
            ]
          },
          "execution_count": 344,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.linspace(0, 2, 9)               # 9 numbers from 0 to 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ry3HVpVTMCkl",
        "outputId": "4e4faaa1-461d-47e4-db0e-8834c7af014e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 0.00000000e+00,  6.42787610e-01,  9.84807753e-01,  8.66025404e-01,\n",
              "        3.42020143e-01, -3.42020143e-01, -8.66025404e-01, -9.84807753e-01,\n",
              "       -6.42787610e-01, -2.44929360e-16])"
            ]
          },
          "execution_count": 345,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x = np.linspace(0, 2 * np.pi, 10)        # useful to evaluate function at lots of points\n",
        "f = np.sin(x)\n",
        "f"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Us5BURArMCkl",
        "jp-MarkdownHeadingCollapsed": true,
        "tags": []
      },
      "source": [
        "## Printing Arrays\n",
        "When you print an array, NumPy displays it in a similar way to nested lists, but with the following layout:\n",
        "\n",
        "- the last axis is printed from left to right,\n",
        "- the second-to-last is printed from top to bottom,\n",
        "- the rest are also printed from top to bottom, with each slice separated from the next by an empty line.\n",
        "\n",
        "One-dimensional arrays are then printed as rows, bidimensionals as matrices and tridimensionals as lists of matrices.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8SGl7upnMCkl",
        "outputId": "c773f801-445c-46ea-e9f5-1080bd03d61d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0, 1, 2, 3, 4, 5])"
            ]
          },
          "execution_count": 347,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.arange(6)                    # 1d array\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LA257Y4iMCkl",
        "outputId": "7f5106e4-c20c-4a4a-a75e-1815cdb27fe5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2],\n",
              "       [ 3,  4,  5],\n",
              "       [ 6,  7,  8],\n",
              "       [ 9, 10, 11]])"
            ]
          },
          "execution_count": 348,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "b = np.arange(12).reshape(4, 3)     # 2d array\n",
        "b"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tMD1ITJCMCkl",
        "outputId": "9ceb21fa-8a56-432f-f34e-d7f1b74db54d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[[ 0,  1,  2,  3],\n",
              "        [ 4,  5,  6,  7],\n",
              "        [ 8,  9, 10, 11]],\n",
              "\n",
              "       [[12, 13, 14, 15],\n",
              "        [16, 17, 18, 19],\n",
              "        [20, 21, 22, 23]]])"
            ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c = np.arange(24).reshape(2, 3, 4)  # 3d array\n",
        "c"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lDDzMz6GMCkl",
        "tags": []
      },
      "source": [
        "## Basic Operations\n",
        "Arithmetic operators on arrays apply elementwise. A new array is created and filled with the result.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "TYqbciK8MCkl",
        "outputId": "ead0cd13-d137-4505-caf0-33b17223307d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([20, 29, 38, 47])"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "a = np.array([20, 30, 40, 50])\n",
        "b = np.arange(4)\n",
        "c = a - b\n",
        "c"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OBfMr7kZcvEx",
        "outputId": "86af5147-254a-47f3-eba3-1af8e14e9610"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([20, 30, 40, 50])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.arange(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tRH1LoG6cuDm",
        "outputId": "6a78a2c0-4c5d-4a76-b4ec-73342b287bcc"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g9EOF5YGMCkl",
        "outputId": "ad90c499-8169-46f1-d62f-caf573e68ab5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([0, 1, 2, 3]), array([  0,   1,  32, 243], dtype=int32))"
            ]
          },
          "execution_count": 350,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "b, b**5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1A6-Hr9uMCkl",
        "outputId": "46d8c46a-e1e4-44eb-910a-7453f29a6a66"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])"
            ]
          },
          "execution_count": 351,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "10 * np.sin(a)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nzLYW0EIMCkp",
        "outputId": "6926e7a7-965f-491e-dc7e-2905b1c38047"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([20, 30, 40, 50]), array([ True,  True, False, False]))"
            ]
          },
          "execution_count": 352,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a, a < 35"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cc-i0TfFMCkp"
      },
      "source": [
        "Some operations, such as += and *=, act in place to modify an existing array rather than create a new one.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "f1y7ICYPMCkq",
        "outputId": "f6a503ea-c03b-4483-da4e-53cebfd01f17",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.25082446, 0.94675294, 0.18932038, 0.17929141],\n",
              "       [0.34988924, 0.23054125, 0.67044574, 0.11507938],\n",
              "       [0.89630937, 0.85813049, 0.00282703, 0.54146616]])"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "rg = np.random.default_rng(12)\n",
        "rg.random((3, 4))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VVxKUj8SeKDw",
        "outputId": "bfff8b31-f20f-462a-9177-f7c0e0d60fde"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Generator(PCG64) at 0x79A511452B20"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "3ggh2aN1MCkq"
      },
      "outputs": [],
      "source": [
        "rg = np.random.default_rng(834) # create instance of default random number generator\n",
        "a = np.ones((2, 3), dtype=int)\n",
        "b = rg.random((2, 3))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "34cXpxlDeDUm",
        "outputId": "3875366f-3e33-41ac-a213-9a853cda4933"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Generator(PCG64) at 0x79A511452500"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6ZaIt2yZi8jc",
        "outputId": "c25887ce-815a-4278-9ca9-fdc5948260bc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[1, 1, 1],\n",
              "       [1, 1, 1]])"
            ]
          },
          "execution_count": 370,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1TNPbPSUi8jc",
        "outputId": "e67702b5-9576-43e7-8268-93cec91c963d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0.40219771, 0.84989682, 0.24486433],\n",
              "       [0.02110287, 0.52300563, 0.12099478]])"
            ]
          },
          "execution_count": 371,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "b"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lUAXUllbi8jd",
        "outputId": "f817abd2-5d12-48e9-f2d5-1931eee62e3c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[3.40219771, 3.84989682, 3.24486433],\n",
              "       [3.02110287, 3.52300563, 3.12099478]])"
            ]
          },
          "execution_count": 372,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = a * 3\n",
        "b = b + a\n",
        "b"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "id": "sRskXeZBMCkq",
        "outputId": "e14c8ac9-3513-4436-dc80-b766eaba623a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "UFuncTypeError",
          "evalue": "Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mUFuncTypeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-51-fbc9744892a0>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mb\u001b[0m  \u001b[0;31m# b is not automatically converted to integer type because the dtype of array `a` was explicitly defined\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mUFuncTypeError\u001b[0m: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'"
          ]
        }
      ],
      "source": [
        "a += b  # b is not automatically converted to integer type because the dtype of array `a` was explicitly defined\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LqmhZu9fi8jf",
        "outputId": "0d7d167e-c777-497f-f915-0c37150f0d95"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.40219771, 1.84989682, 1.24486433],\n",
              "       [1.02110287, 1.52300563, 1.12099478]])"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ],
      "source": [
        "b += a\n",
        "b"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dAlXC041MCkq",
        "tags": []
      },
      "source": [
        "## Universal Functions\n",
        "NumPy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called “universal functions” (ufunc). Within NumPy, these functions operate elementwise on an array, producing an array as output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gHJQ3rn7MCkq",
        "outputId": "b38af499-8d43-482e-f8ae-e1811ac7d85f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0, 1, 2])"
            ]
          },
          "execution_count": 376,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "B = np.arange(3)\n",
        "B"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7Cnylb6cMCkr",
        "outputId": "f304fd54-c027-4486-baea-86cb35462a5b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0.        , 1.        , 1.41421356])"
            ]
          },
          "execution_count": 378,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.sqrt(B)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B2FFDt4kMCkr",
        "outputId": "6dfe9def-7696-4a6b-acee-af75ce926363"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([2., 0., 6.])"
            ]
          },
          "execution_count": 379,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "C = np.array([2., -1., 4.])\n",
        "np.add(B, C)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_wB9EvBKMCkr",
        "outputId": "b03891cf-e8d3-4ec9-bb67-3e10d844ab09"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([2., 0., 6.])"
            ]
          },
          "execution_count": 380,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "B + C"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DJiQVxVpMCks",
        "tags": []
      },
      "source": [
        "## Indexing, Slicing and Iterating\n",
        "One-dimensional arrays can be indexed, sliced and iterated over, much like lists and other Python sequences."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "id": "29Y8M9QVMCks",
        "outputId": "e60f7b1e-c739-4e41-a90e-e167f641302f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "a = np.arange(10)**3\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E7H4xl9aMCks",
        "outputId": "27b23226-7e67-4bf4-c1d0-f4971f1c19a6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "27"
            ]
          },
          "execution_count": 382,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a[3]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z22Eq_fwMCkt",
        "outputId": "bbd1c2f0-5090-45a4-b0d6-0cd98ce853ff"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([  0,   8,  64, 216], dtype=int32)"
            ]
          },
          "execution_count": 383,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a[0:7:2] #stepping"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3knhthc_MCku",
        "outputId": "19e7dc20-77e7-4d50-b92d-4e54bba70d2c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1000,    1, 1000,   27, 1000,  125,  216,  343,  512,  729],\n",
              "      dtype=int32)"
            ]
          },
          "execution_count": 390,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a[0:6:2] = 1000\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LlzlKw-RMCku",
        "outputId": "29dead2a-2a32-4a62-cb55-90f67c19e0fe"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 729,  512,  343,  216,  125, 1000,   27, 1000,    1, 1000],\n",
              "      dtype=int32)"
            ]
          },
          "execution_count": 391,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a[::-1]  # reversed a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2107p-Ini8jv",
        "outputId": "84282792-5472-4dec-e061-926f9e814d92"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 729,  216,   27, 1000], dtype=int32)"
            ]
          },
          "execution_count": 393,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a[::-3]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w2rWG2kWMCku"
      },
      "source": [
        "The dots (...) represent as many colons as needed to produce a complete indexing tuple. For example, if x is an array with 5 axes, then\n",
        "\n",
        "x[1, 2, ...] is equivalent to x[1, 2, :, :, :],\n",
        "\n",
        "x[..., 3] to x[:, :, :, :, 3] and\n",
        "\n",
        "x[4, ..., 5, :] to x[4, :, :, 5, :].\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "id": "aY-EVmMRMCku",
        "outputId": "d01f2d5e-1fb0-4fa5-d247-e1bfb9c1612b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2, 2, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ],
      "source": [
        "c = np.array([[[  0,  1,  2],  # a 3D array (two stacked 2D arrays)\n",
        "               [ 10, 12, 13]],\n",
        "              [[100, 101, 102],\n",
        "               [110, 112, 113]]])\n",
        "c.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6jyVuO2Fi8jv",
        "outputId": "1612e5b2-6da9-4c57-c2ed-866fd4e4d55f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 0,  1,  2],\n",
              "        [ 3,  4,  5],\n",
              "        [ 6,  7,  8],\n",
              "        [ 9, 10, 11]],\n",
              "\n",
              "       [[12, 13, 14],\n",
              "        [15, 16, 17],\n",
              "        [18, 19, 20],\n",
              "        [21, 22, 23]]])"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ],
      "source": [
        "np.arange(24).reshape(2,3,4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CpNhtjHTi8jv",
        "outputId": "b487d071-72f8-474f-9c35-5e5207614655"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0, 1, 2],\n",
              "       [3, 4, 5]])"
            ]
          },
          "execution_count": 409,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.arange(6).reshape(2,3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lW1XsO8yMCku",
        "outputId": "0de5eb2d-845b-4754-fb3b-583806135b29"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[[[0, 1, 2], [10, 12, 13]], [[100, 101, 102], [110, 112, 113]]]"
            ]
          },
          "execution_count": 395,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "[\n",
        "    [\n",
        "        [  0,  1,  2],  # a 3D array (two stacked 2D arrays)\n",
        "        [ 10, 12, 13]\n",
        "    ],\n",
        "    [\n",
        "        [100, 101, 102],\n",
        "        [110, 112, 113]\n",
        "    ]\n",
        "]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CrkGdZQJi8jw",
        "outputId": "2ac570e7-08f7-4504-9aab-3bcb0ad1e9c6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "execution_count": 399,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "[1,2,4,5][1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PmButuIGMCku",
        "outputId": "21fe5b78-64cc-467b-d47e-53d04581d9cb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[100, 101, 102],\n",
              "       [110, 112, 113]])"
            ]
          },
          "execution_count": 396,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c[1, ...]  # same as c[1, :, :] or c[1]; row at index 1 and all the column values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CPdm49NEi8jw",
        "outputId": "cf5e77c5-e768-4199-da89-dababe9425d9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[100, 101, 102],\n",
              "       [110, 112, 113]])"
            ]
          },
          "execution_count": 402,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c[1,:,:]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rw3yzUDSi8jw",
        "outputId": "0531526b-4ff2-44d8-8105-13da2117eb86"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "110"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "c[1, 1, 0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lSgrG7Hqi8jw",
        "outputId": "fef33c17-582e-4ca5-8e28-d7cbcc7777f2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[  2,  13],\n",
              "       [102, 113]])"
            ]
          },
          "execution_count": 405,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c[1, 1, 2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DYUta87cMCku",
        "outputId": "aa57275d-0aec-42b6-a9d3-876fc5207766"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[  2,  13],\n",
              "       [102, 113]])"
            ]
          },
          "execution_count": 397,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c[..., 2]  # same as c[:, :, 2]; for each row pich 2nd column at index 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oSeLaE0_MCkv",
        "tags": []
      },
      "source": [
        "# Shape Manipulation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Do-SYTnXMCkv",
        "tags": []
      },
      "source": [
        "## Changing the shape of an array\n",
        "An array has a shape given by the number of elements along each axis:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZFk2UEvAi8jw"
      },
      "source": [
        "floor: lower value from float means: 1.9 = 1., 1.1 = 1.\n",
        "\n",
        "ceil: upper value from float means: 1.9 = 2., 1.1 = 2."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "URbShIsUMCkv",
        "outputId": "11bb1b37-8464-4361-ed2a-47466cb407a6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[2.65131773, 3.11536088, 4.35903651, 8.19665856],\n",
              "       [6.66143389, 8.00384035, 0.22325882, 6.91892435],\n",
              "       [9.53262587, 3.24316417, 7.88003072, 0.29044287]])"
            ]
          },
          "execution_count": 412,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "temp_array = rg.random((3, 4))\n",
        "temp_array = temp_array*10\n",
        "temp_array"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zvOVhanVi8jx",
        "outputId": "c7007d83-434b-4731-aaea-39e52aea5f86"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[2., 3., 4., 8.],\n",
              "       [6., 8., 0., 6.],\n",
              "       [9., 3., 7., 0.]])"
            ]
          },
          "execution_count": 414,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.floor( temp_array)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iS2-Bg1Ii8jx"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4J2J0qWYi8jx",
        "outputId": "9943dc06-0fbc-4f94-ffec-004726295c39"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 3.,  4.,  5.,  9.],\n",
              "       [ 7.,  9.,  1.,  7.],\n",
              "       [10.,  4.,  8.,  1.]])"
            ]
          },
          "execution_count": 416,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "temp_array = np.ceil(temp_array)\n",
        "temp_array"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dUG8BH1HMCkv",
        "outputId": "88827814-4279-45bd-c58d-ff55594ec470"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 3.,  4.,  5.,  9.,  7.,  9.,  1.,  7., 10.,  4.,  8.,  1.])"
            ]
          },
          "execution_count": 417,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "temp_array.ravel()  # returns the array, flattened"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LrgGKsALMCkv",
        "outputId": "29a00e48-f5d3-4441-ef12-99bb270d89ab"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 3.,  4.,  5.,  9.,  7.,  9.,  1.,  7., 10.,  4.,  8.,  1.])"
            ]
          },
          "execution_count": 418,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "temp_array.reshape(12)  # returns the array with a modified shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6wFQgWSrMCkv",
        "outputId": "12e31d4e-6758-41c8-8125-6492f457602e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([[ 3.,  7., 10.],\n",
              "        [ 4.,  9.,  4.],\n",
              "        [ 5.,  1.,  8.],\n",
              "        [ 9.,  7.,  1.]]),\n",
              " array([[ 3.,  4.,  5.,  9.],\n",
              "        [ 7.,  9.,  1.,  7.],\n",
              "        [10.,  4.,  8.,  1.]]))"
            ]
          },
          "execution_count": 227,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "temp_array.T, temp_array  # returns the array, transposed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RyFVCIBLMCkv",
        "outputId": "f5842b42-0ba4-455f-fecb-c3f7b35d6a2c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 3.,  4.,  5.,  9.,  7.,  9.,  1.,  7., 10.,  4.,  8.,  1.])"
            ]
          },
          "execution_count": 420,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "temp_array.reshape(-1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IAGeCKk6MCkw",
        "tags": []
      },
      "source": [
        "## Stacking together different arrays\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "B31jE7sZMCkw",
        "outputId": "56c0a677-a171-4578-c5ae-49fbf190df6f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[1., 2.],\n",
              "        [4., 4.]]),\n",
              " (2, 2))"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ],
      "source": [
        "a = np.floor(10 * rg.random((2, 2)))\n",
        "a, a.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "id": "HU_2qFRcMCkw",
        "outputId": "9b515d67-c404-44b0-c3ad-f782eab69ca8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[4., 9.],\n",
              "        [2., 1.]]),\n",
              " (2, 2))"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "b = np.floor(10 * rg.random((2, 2)))\n",
        "b, b.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8rxs3fbHMCkw",
        "outputId": "c12e692c-5068-4bee-ff2e-0c0a65a863bc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([[3., 1.],\n",
              "        [0., 3.],\n",
              "        [7., 4.],\n",
              "        [4., 3.]]),\n",
              " (4, 2))"
            ]
          },
          "execution_count": 423,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.vstack((a, b)), np.vstack((a, b)).shape #joining on rows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YmGXafBcMCkw",
        "outputId": "bfe19300-ce28-4092-99af-6658744213aa"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([[3., 1., 7., 4.],\n",
              "        [0., 3., 4., 3.]]),\n",
              " (2, 4))"
            ]
          },
          "execution_count": 424,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.hstack((a, b)), np.hstack((a, b)).shape #joining on columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "id": "s5Mrux_WMCkw",
        "outputId": "9d3dded0-1a56-460f-b128-d88f9a55bd7c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 2.],\n",
              "       [4., 4.],\n",
              "       [4., 9.],\n",
              "       [2., 1.]])"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ],
      "source": [
        "# here axis will define vstack(0) or hstack(1)\n",
        "np.concatenate(\n",
        "    (a, b),\n",
        "    axis=0\n",
        ")\n",
        "\n",
        "\n",
        "# ,np.concatenate(\n",
        "#     (a, b),\n",
        "#     axis=1\n",
        "# ).shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lZiw6Kavi8jz",
        "outputId": "c7c347d6-c592-4f49-f5ae-e049c4ced148"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([[3., 1.],\n",
              "        [0., 3.],\n",
              "        [7., 4.],\n",
              "        [4., 3.]]),\n",
              " (4, 2))"
            ]
          },
          "execution_count": 426,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.concatenate(\n",
        "    (a, b),\n",
        "    axis=0\n",
        "),np.concatenate(\n",
        "    (a, b),\n",
        "    axis=0\n",
        ").shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PjTbKMUzMCkw"
      },
      "source": [
        "# Linear Algebraic Operations and EinOps"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zLFJl6UEMCkw"
      },
      "source": [
        "The Einstein summation convention can be used to compute\n",
        "many multi-dimensional, linear algebraic array operations. `einsum`\n",
        "provides a succinct way of representing these.\n",
        "A non-exhaustive list of these operations,\n",
        "which can be computed by `einsum`, is shown below along with examples:\n",
        "* Trace of an array, `numpy.trace`.\n",
        "* Return a diagonal, `numpy.diag`.\n",
        "* Array axis summations, `numpy.sum`.\n",
        "* Transpositions and permutations, `numpy.transpose`.\n",
        "* Matrix multiplication and dot product, `numpy.matmul` `numpy.dot`.\n",
        "* Vector inner and outer products, `numpy.inner` `numpy.outer`.\n",
        "* Broadcasting, element-wise and scalar multiplication, `numpy.multiply`.\n",
        "* Chained array operations, in efficient calculation order, `numpy.einsum_path`.\n",
        "\n",
        "![image.png](http://localhost:8889/files/notebooks/assets/einops.png?_xsrf=2%7Ca072ab03%7C26bb16110896eae390b2203cf61cc086%7C1673255054)\n",
        "\n",
        "* \"ij,jk->ik\" → Matrix multiplication\n",
        "* \"ii\" → Trace of a matrix\n",
        "* \"ij->ji\" → Transpose of a matrix\n",
        "* \"ij,j->i\" → Matrix-vector multiplication\n",
        "* \"ij,ik->jk\" → Outer product of two matrices"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "BookVDEVMCkx",
        "outputId": "c579d445-276a-4dcc-f2a8-1c2ad39826fa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 2]\n",
            " [3 4 5]]\n",
            "(2, 3)\n",
            "15\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "15"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "a = np.arange(6).reshape(2, 3)\n",
        "print(a)\n",
        "print(a.shape)\n",
        "print(np.einsum(\"ij->\", a))\n",
        "np.sum(a) # vector sum"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UUepvIFOMCkx",
        "outputId": "8673d281-587c-4496-e2cf-622452837de9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[0 1 2]\n",
            " [3 4 5]]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "(array([ 3, 12]), array([ 3, 12]))"
            ]
          },
          "execution_count": 430,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.arange(6).reshape(2, 3)\n",
        "print(a)\n",
        "np.einsum('ij->i', a), np.sum(a, axis=1) # summing over an axis i=row"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qY7_6DbDMCkx",
        "outputId": "872a211c-f839-488c-c931-f25a46938002"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[0 1 2]\n",
            " [3 4 5]]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "(array([[0, 3],\n",
              "        [1, 4],\n",
              "        [2, 5]]),\n",
              " array([[0, 3],\n",
              "        [1, 4],\n",
              "        [2, 5]]))"
            ]
          },
          "execution_count": 431,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.arange(6).reshape(2, 3)\n",
        "print(a)\n",
        "np.einsum('ij->ji', a), a.T # transpose; value at i,j index will be at j,i index"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QJecKpC4MCkx",
        "outputId": "2cbb9674-97f6-4d36-f6a6-c713521b981f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-----\n",
            "[[0 1 2]\n",
            " [3 4 5]] (2, 3)\n",
            "-----\n",
            "[0 1 2] (3,)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "(array([ 5, 14]), array([ 5, 14]))"
            ]
          },
          "execution_count": 433,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.arange(6).reshape(2, 3)\n",
        "b = np.arange(3)\n",
        "print(\"-----\")\n",
        "print(a, a.shape)\n",
        "print(\"-----\")\n",
        "print(b, b.shape)\n",
        "np.einsum('ik,k->i', a, b), np.matmul(a, b)\n",
        "# ik - (2,3)\n",
        "# k - (3,)\n",
        "# i - (2,)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZZWoEc86MCkx",
        "outputId": "8375c76c-562a-44aa-f4cb-bbd5462a282a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-----\n",
            "[[0 1 2]\n",
            " [3 4 5]] (2, 3)\n",
            "-----\n",
            "[[ 0  1  2  3  4]\n",
            " [ 5  6  7  8  9]\n",
            " [10 11 12 13 14]] (3, 5)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "(array([[ 25,  28,  31,  34,  37],\n",
              "        [ 70,  82,  94, 106, 118]]),\n",
              " array([[ 25,  28,  31,  34,  37],\n",
              "        [ 70,  82,  94, 106, 118]]))"
            ]
          },
          "execution_count": 435,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.arange(6).reshape(2, 3)\n",
        "b = np.arange(15).reshape(3, 5)\n",
        "print(\"-----\")\n",
        "print(a,a.shape)\n",
        "print(\"-----\")\n",
        "print(b,b.shape)\n",
        "np.einsum('ik,kj->ij', a, b), np.matmul(a, b)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7J_QS0bYMCky",
        "outputId": "6c25e586-b805-42cb-df3c-139e1537ef61"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-----\n",
            "[0 1 2] (3,)\n",
            "-----\n",
            "[3 4 5] (3,)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "(14, 14)"
            ]
          },
          "execution_count": 437,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.arange(3)\n",
        "b = np.arange(3,6)\n",
        "print(\"-----\")\n",
        "print(a, a.shape)\n",
        "print(\"-----\")\n",
        "print(b, b.shape)\n",
        "np.einsum('i,i->', a, b), np.dot(a, b)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "enzXwHlSMCky",
        "outputId": "db1de1f4-b10b-4cf9-daf2-37d971c82b50"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-----\n",
            "[[0 1 2]\n",
            " [3 4 5]] (2, 3)\n",
            "-----\n",
            "[[ 6  7  8]\n",
            " [ 9 10 11]] (2, 3)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "(145,\n",
              " array([[ 0,  7, 16],\n",
              "        [27, 40, 55]]),\n",
              " 145)"
            ]
          },
          "execution_count": 440,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.arange(6).reshape(2, 3)\n",
        "b = np.arange(6,12).reshape(2, 3)\n",
        "print(\"-----\")\n",
        "print(a,a.shape)\n",
        "print(\"-----\")\n",
        "print(b,b.shape)\n",
        "np.einsum('ij,ij->', a, b),np.multiply(a, b),np.sum(np.multiply(a, b))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zc5pSatyMCky"
      },
      "source": [
        "## Random Numbers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9JKFDmKvMCky",
        "outputId": "7e8001ac-487b-4dca-b083-99abc5f487f8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([[[0.00509622, 0.03003199, 0.26840263],\n",
              "         [0.42597593, 0.17749642, 0.69249817]],\n",
              " \n",
              "        [[0.3444237 , 0.25435837, 0.53796424],\n",
              "         [0.95832742, 0.79040021, 0.55499542]]]),\n",
              " (2, 2, 3))"
            ]
          },
          "execution_count": 441,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "rand_array = np.random.rand(2, 2, 3)\n",
        "rand_array, rand_array.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U0zAhesMMCky",
        "outputId": "49511b1c-b8fd-4ed5-d166-6e6406ff2de1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[ 0.94248567 -1.01037224  1.46879345 ... -0.95621479 -0.74752906\n",
            "   0.78862073]\n",
            " [ 0.29747419 -0.90233242  0.03195125 ... -1.01029821  0.35563254\n",
            "  -2.22369646]\n",
            " [-1.10181908  1.50009699  1.38788412 ... -0.15100109 -0.77292649\n",
            "   0.40320787]\n",
            " ...\n",
            " [-1.66810077  0.9762288   1.16272042 ...  0.08021571  0.90345063\n",
            "   0.29158887]\n",
            " [-0.32136802 -1.47316454  2.55366209 ...  0.13902821 -0.69318941\n",
            "   0.48329124]\n",
            " [-0.32067973 -1.10214748  2.07122156 ... -0.91945674 -1.16453391\n",
            "  -0.35893938]]\n",
            "(10, 1000)\n",
            "-0.013106913992026408\n",
            "0.9962470134784904\n"
          ]
        }
      ],
      "source": [
        "a = np.random.randn(10, 1000) #10,1000 shape, using normal dist, mean ~ 0, std~1\n",
        "print(a)\n",
        "print(a.shape)\n",
        "print(np.mean(a))\n",
        "print(np.std(a))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FZy30Vdci8j0"
      },
      "source": [
        "### distributions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "ySTPk2lcMCkz",
        "outputId": "c8eff912-8a3f-4e00-8a4f-1b4e9d59764a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2, 8, 2],\n",
              "       [8, 7, 4]])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "np.random.randint(2, 10, (2, 3)) # do not do this"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lh5ms58fMCkz",
        "outputId": "35bc3967-ea80-4e4a-fb6c-1e5327985805"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[8, 7, 6],\n",
              "       [8, 4, 7]])"
            ]
          },
          "execution_count": 445,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "a = np.random.randint(low=2, high=10, size=(2, 3))\n",
        "a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rG7n-7xLMCkz",
        "outputId": "132ee27a-816d-4a04-b0d5-ba3eccdd9ae3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[1, 0, 1, 0],\n",
              "       [1, 0, 2, 1],\n",
              "       [2, 2, 2, 1]])"
            ]
          },
          "execution_count": 446,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.random.poisson(lam=1.0, size=(3, 4))"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "O0ucLqrijtPL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "id": "nwTfxP73MCkz",
        "outputId": "631ac91c-b18e-422c-d142-a14e835120a1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[91, 96, 90, 89, 91],\n",
              "       [96, 94, 86, 89, 91]])"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "source": [
        "np.random.binomial(size=(2, 5), n=100, p=0.9)\n",
        "#n =number of trails, p=prob of success"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jn-MkIglMCkz",
        "outputId": "1e3c4c14-feb1-4210-eaea-648c18148729"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0])"
            ]
          },
          "execution_count": 448,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.random.binomial(n=1, p=0.5, size=(20))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ubpqrXltMCk0"
      },
      "source": [
        "# References and further reading\n",
        "- [NumPy: the absolute basics for beginners](https://numpy.org/devdocs/user/absolute_beginners.html)\n",
        "- [Array Broadcasting in numpy](http://scipy.github.io/old-wiki/pages/EricsBroadcastingDoc)\n",
        "- [Einops tutorial, part 1: basics](https://github.com/arogozhnikov/einops/blob/master/docs/1-einops-basics.ipynb)\n",
        "- [EINSUM IS ALL YOU NEED - EINSTEIN SUMMATION IN DEEP LEARNING](https://rockt.github.io/2018/04/30/einsum)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "[1, 2, 3] ** 5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "v0Oda5Puj7-_",
        "outputId": "f2698d27-9923-4869-be1d-fd26ea19b2fb"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "unsupported operand type(s) for ** or pow(): 'list' and 'int'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-70-5f86f35896d2>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m**\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for ** or pow(): 'list' and 'int'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "id": "pP1ElGlGMCk0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a1160eaa-a219-4aee-9e7c-5600958159fd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  1,  32, 243])"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ],
      "source": [
        "np.array([1, 2, 3]) ** 5"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "vscode": {
      "interpreter": {
        "hash": "d4f7b557aba1da6cb3717e0bcf1bc5a2af0481727f23aec6d360c9d8c76daaf4"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}