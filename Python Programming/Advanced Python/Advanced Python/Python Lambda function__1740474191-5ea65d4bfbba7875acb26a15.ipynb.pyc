{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNqtQUDhfcNeu8pDjmzwRMJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Python Lambda Functions: A Step-by-Step Guide"],"metadata":{"id":"hefOK4St94II"}},{"cell_type":"markdown","source":["#### Introduction\n","Lambda functions in Python are anonymous functions defined using the `lambda` keyword. They are often used for short, simple operations where defining a full function using `def` would be unnecessary."],"metadata":{"id":"BBzcVAb497I2"}},{"cell_type":"markdown","source":["#### 1. Basic Lambda Function"],"metadata":{"id":"MPDFhLi6-FL6"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lPpgabd99vdb","executionInfo":{"status":"ok","timestamp":1740373744427,"user_tz":-330,"elapsed":18,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"2f175e89-9b6a-46cf-f4d0-626ec6acc32e"},"outputs":[{"output_type":"stream","name":"stdout","text":["25\n","25\n"]}],"source":["# Normal function\n","def square(x):\n","    return x * x\n","\n","# Equivalent lambda function\n","square_lambda = lambda x: x * x\n","\n","print(square(5))  # Output: 25\n","print(square_lambda(5))  # Output: 25"]},{"cell_type":"markdown","source":["#### Why Use Lambda Functions?\n","- **Concise Syntax:** Allows defining functions in a single line.\n","- **Useful for Functional Programming:** Commonly used with `map()`, `filter()`, and `reduce()`.\n","- **No Need for Naming:** Useful when a function is needed only temporarily."],"metadata":{"id":"TkE5yO2h_Evo"}},{"cell_type":"markdown","source":["#### 2. Using Lambda with map()"],"metadata":{"id":"DcC_V95t_KkM"}},{"cell_type":"code","source":["def sqaure(x):\n","    return x * x\n","\n","numbers = [1, 2, 3, 4]\n","squared = list(map(sqaure, numbers))\n","print(squared)  # Output: [1, 4, 9, 16]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CjDGasar_Fm0","executionInfo":{"status":"ok","timestamp":1740374239908,"user_tz":-330,"elapsed":59,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"a5c9b2a5-cf3d-4ab0-cedc-f7ab1b234c89"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 4, 9, 16]\n"]}]},{"cell_type":"markdown","source":["#### 3. Using Lambda with filter()"],"metadata":{"id":"vtRWfwVR_Od7"}},{"cell_type":"code","source":["numbers = [1, 2, 3, 4, 5, 6]\n","even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n","print(even_numbers)  # Output: [2, 4, 6]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gpdJIY0l_O1u","executionInfo":{"status":"ok","timestamp":1740373940450,"user_tz":-330,"elapsed":24,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"773f634a-bd2f-4801-d611-b59a624faa3b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6]\n"]}]},{"cell_type":"markdown","source":["#### 4. Using Lambda with sorted()"],"metadata":{"id":"DpshMZ-P_TA0"}},{"cell_type":"code","source":["people = [(\"John\", 25), (\"Alice\", 30), (\"Bob\", 20)]\n","sorted_people = sorted(people, key=lambda x: x[1])\n","print(sorted_people)  # Output: [('Bob', 20), ('John', 25), ('Alice', 30)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dCJoogmb_Qc4","executionInfo":{"status":"ok","timestamp":1740374013736,"user_tz":-330,"elapsed":20,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"e134e01f-fdb8-450d-bcf4-9ea778ab914c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[('Bob', 20), ('John', 25), ('Alice', 30)]\n"]}]},{"cell_type":"markdown","source":["#### 5. Using Lambda with reduce()\n","\n","`functools.reduce()` is used to apply a function cumulatively to the elements of an iterable, reducing it to a single value. It's useful for operations like summing or multiplying a list of numbers."],"metadata":{"id":"fQULbRMx_WT_"}},{"cell_type":"code","source":["from functools import reduce\n","numbers = [1, 2, 3, 4]\n","product = reduce(lambda x, y: x * y, numbers)\n","print(product)  # Output: 24"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oliE87_o_SN4","executionInfo":{"status":"ok","timestamp":1740374088991,"user_tz":-330,"elapsed":20,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"08b7c588-ca79-4637-9937-def168a55e19"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["24\n"]}]},{"cell_type":"markdown","source":["#### Conclusion\n","Lambda functions are powerful tools for writing short, efficient functions. However, they should be used carefully to maintain code readability.\n","\n","#### Drawbacks of Lambda Functions\n","- **Limited Readability:** Complex expressions can become hard to read.\n","- **Single Expression Only:** Can only contain one expression, limiting functionality.\n","- **Harder to Debug:** Lack of a function name makes debugging more difficult.\n"],"metadata":{"id":"5lKoIH-U_caf"}}]}