{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM1g+aJz8xssjKsp3iF+YuT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Introduction\n","# Generators are a special type of iterator in Python that allow you to iterate over a sequence of values lazily.\n","# They help in efficient memory usage and improve performance for large datasets.\n","\n","# 1. Basic Generator Example\n","def simple_generator():\n","    yield 1\n","    yield 2\n","    yield 3\n","\n","# Creating a generator object\n","gen = simple_generator()\n","\n","# Iterating through generator\n","print(next(gen))  # Output: 1\n","# print(next(gen))  # Output: 2\n","# print(next(gen))  # Output: 3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S46Q0mvT8dLo","executionInfo":{"status":"ok","timestamp":1740373126606,"user_tz":-330,"elapsed":19,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"c3d48074-b139-4b9f-bbc4-2822e064bae7"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]}]},{"cell_type":"code","source":["# 2. Using Generators in a Loop\n","for value in simple_generator():\n","    print(value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Msp0_BL8nN3","executionInfo":{"status":"ok","timestamp":1740373172389,"user_tz":-330,"elapsed":9,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"f8022a84-e93e-4c84-ec6c-0ed3b8615672"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n"]}]},{"cell_type":"code","source":["# 3. Generators vs Normal Functions\n","# Functions return values and terminate, while generators yield values and retain state.\n","def normal_function():\n","    return [1, 2, 3]\n","\n","def generator_function():\n","    yield 1\n","    yield 2\n","    yield 3\n","\n","print(normal_function())  # Returns full list\n","print(list(generator_function()))  # Returns list but generates lazily"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yAXWz3FD8qpi","executionInfo":{"status":"ok","timestamp":1740373210821,"user_tz":-330,"elapsed":55,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"e8e598f7-11ab-458d-aca2-ffb71372508d"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3]\n","[1, 2, 3]\n"]}]},{"cell_type":"code","source":["# 4. Infinite Generators\n","# Useful when working with streams of data\n","def infinite_counter():\n","    num = 0\n","    while True:\n","        yield num\n","        num += 1"],"metadata":{"id":"qA016CQD8wea","executionInfo":{"status":"ok","timestamp":1740373268540,"user_tz":-330,"elapsed":4,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["import time\n","\n","for i in infinite_counter():\n","    time.sleep(1)\n","    print(i)"],"metadata":{"id":"OtxHr9FQ8xvB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 5. Generator Expressions\n","# Similar to list comprehensions but generate lazily\n","square_gen = (x * x for x in range(5))\n","print(list(square_gen))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4UXEamiA9BFg","executionInfo":{"status":"ok","timestamp":1740373498184,"user_tz":-330,"elapsed":50,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"80f602aa-bfc3-4af4-fa0c-7e5fd3fc98f0"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 1, 4, 9, 16]\n"]}]},{"cell_type":"code","source":["# 6. Memory Efficiency of Generators\n","import sys\n","\n","def large_list():\n","    return [i for i in range(1000000)]\n","\n","def large_generator():\n","    return (i for i in range(1000000))\n","\n","print(sys.getsizeof(large_list()))      # Consumes large memory\n","print(sys.getsizeof(large_generator())) # Consumes very little memory"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4MkZPRAp9ERX","executionInfo":{"status":"ok","timestamp":1740373454019,"user_tz":-330,"elapsed":44,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"f0c218a5-b0fa-4a9b-d73b-b47bb9058c8c"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["8448728\n","200\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dPENUA7p8KLQ"},"outputs":[],"source":["# 7. Drawbacks of Generators\n","# - Cannot access previous values once iterated\n","# - Difficult to debug due to lazy evaluation\n","# - Limited built-in operations compared to lists"]}]}