{"cells":[{"cell_type":"markdown","id":"421c335f","metadata":{"id":"421c335f"},"source":["**Why Learn Python?**\n","\n","Python is one of the most versatile and widely-used programming languages in the world. Whether you're aiming to work at top companies like Google, Facebook, or Netflix, or want to dive into exciting fields like data science, web development, or game creation, Python has you covered.\n","\n","From automating mundane tasks to building cutting-edge machine learning models, Python's simplicity and power make it an essential tool for beginners and experts alike. Its global community and vast libraries ensure you'll always have support and resources as you grow.\n","\n","Start your Python journey today and unlock endless possibilities in technology and innovation!\n","\n"]},{"cell_type":"markdown","id":"867e8c31","metadata":{"id":"867e8c31"},"source":["## Installation/Getting Started\n","\n","1> Python Application\n","- Official site https://www.python.org/\n","- Run the installer and ensuring \"Add Python to PATH\" is selected.\n","- Verifying installation using python --version or python3 --version.\n","\n","2> Online Python Options (No Installation Required)\n","- Google Colab\n","- Replit\n","\n","3> IDE\n","- An IDE (Integrated Development Environment) is a software application that provides a comprehensive set of tools to help developers write, test, and debug code efficiently. It combines various tools and features into a single interface, simplifying the programming process.\n","\n","4> Anaconda\n","- Anaconda and Miniconda are package management and environment management tools specifically designed for Python (and R) programming. They simplify the process of setting up and managing Python environments, especially for data science and machine learning tasks."]},{"cell_type":"markdown","source":["## Why Learn Python?\n","\n","Python is one of the most versatile and widely-used programming languages in the world. Whether you're aiming to work at top companies like Google, Facebook, or Netflix, or want to dive into exciting fields like data science, web development, or game creation, Python has you covered.\n","\n","From automating mundane tasks to building cutting-edge machine learning models, Python's simplicity and power make it an essential tool for beginners and experts alike. Its global community and vast libraries ensure you'll always have support and resources as you grow.\n","\n","Start your Python journey today and unlock endless possibilities in technology and innovation!\n","\n","---\n","\n","## Introduction to Google Colab\n","\n","Google Colab, or \"Colaboratory,\" is a free, cloud-based platform that allows you to write and execute Python code directly in your web browser. It’s a powerful tool, especially for beginners and those working on machine learning, data science, or collaborative projects.\n","\n","### Why Use Google Colab?\n","- **Free to Use**: No installation or setup is required; you only need a Google account.\n","- **Cloud-based**: Work on your projects from anywhere with an internet connection.\n","- **Built-in Hardware Support**: Access free GPUs and TPUs for faster computations.\n","- **Collaboration**: Share notebooks with others and work together in real time.\n","- **Rich Libraries**: Pre-installed libraries for data science, machine learning, and more.\n","\n","### Getting Started with Google Colab\n","1. Go to [Google Colab](https://colab.research.google.com/).\n","2. Sign in with your Google account.\n","3. Create a new notebook by clicking **File > New notebook**.\n","4. Write Python code in the cells and press **Shift + Enter** to execute.\n","\n","With Google Colab, you can explore Python’s capabilities without worrying about setting up your environment.\n"],"metadata":{"id":"YaZ3rWGhdj_C"},"id":"YaZ3rWGhdj_C"},{"cell_type":"markdown","id":"94720100","metadata":{"id":"94720100"},"source":["## Writing the very first python program\n","\n","When it comes to learning a new programming language, it's a tradition to start with the hello world program which is nothing but a simple program to print `Hello, World!` onto the console.\n"]},{"cell_type":"code","execution_count":1,"id":"e03c8005","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e03c8005","outputId":"09d778e4-cf24-4bcb-b25e-052c8edf1e3a","executionInfo":{"status":"ok","timestamp":1736932435760,"user_tz":-330,"elapsed":487,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, World!\n"]}],"source":["print('Hello, World!')"]},{"cell_type":"markdown","id":"fc83c7c0","metadata":{"id":"fc83c7c0"},"source":["## how to get help in python\n","\n","`help()` function is used to get the documentation of specified module, class, function, variables etc."]},{"cell_type":"code","execution_count":2,"id":"9693b225","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9693b225","outputId":"40b2781d-5e13-4a7b-ba6e-7b3774d31165","executionInfo":{"status":"ok","timestamp":1736932473994,"user_tz":-330,"elapsed":506,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Help on built-in function print in module builtins:\n","\n","print(*args, sep=' ', end='\\n', file=None, flush=False)\n","    Prints the values to a stream, or to sys.stdout by default.\n","    \n","    sep\n","      string inserted between values, default a space.\n","    end\n","      string appended after the last value, default a newline.\n","    file\n","      a file-like object (stream); defaults to the current sys.stdout.\n","    flush\n","      whether to forcibly flush the stream.\n","\n"]}],"source":["help(print)"]},{"cell_type":"markdown","id":"1f17d328","metadata":{"id":"1f17d328"},"source":["## How to take user input in python\n","\n","`input()` method is used in python to take input from a user. The return type of input method is string."]},{"cell_type":"code","source":["input()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"cz2j6ZVCsEZt","outputId":"15769472-4bef-491a-bcf9-5493202686d3","executionInfo":{"status":"ok","timestamp":1736932567540,"user_tz":-330,"elapsed":14535,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"id":"cz2j6ZVCsEZt","execution_count":3,"outputs":[{"name":"stdout","output_type":"stream","text":["hello\n"]},{"output_type":"execute_result","data":{"text/plain":["'hello'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","id":"cb45e4f9","metadata":{"id":"cb45e4f9"},"source":["While using the `input` method an optional argument `prompt` can be passed which is used to display a prompt message for the user so that user know what kind of value the program needs."]},{"cell_type":"code","execution_count":null,"id":"103ca53d","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"103ca53d","outputId":"6a9c69c1-37c9-413a-a5b1-8da7f36284d5"},"outputs":[{"name":"stdout","output_type":"stream","text":["What is your name? Ishpreet\n"]},{"output_type":"execute_result","data":{"text/plain":["'Ishpreet'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}],"source":["input(prompt=\"What is your name? \")"]},{"cell_type":"code","execution_count":4,"id":"266c0f98","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"266c0f98","outputId":"c2e30468-05bb-454b-d3e0-9947f69792ea","executionInfo":{"status":"ok","timestamp":1736932706269,"user_tz":-330,"elapsed":12432,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"name":"stdout","output_type":"stream","text":["What is your age: 25\n"]},{"output_type":"execute_result","data":{"text/plain":["'25'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}],"source":["input(\"What is your age: \")"]},{"cell_type":"code","source":["input(\"What is you name:?\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"OcXDHcwlQeCV","executionInfo":{"status":"ok","timestamp":1736932739903,"user_tz":-330,"elapsed":9926,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"87309039-a2fe-4686-a044-e4099b4726df"},"id":"OcXDHcwlQeCV","execution_count":5,"outputs":[{"name":"stdout","output_type":"stream","text":["What is you name:?harjas\n"]},{"output_type":"execute_result","data":{"text/plain":["'harjas'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["type('string')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PqbE-JAGtKAD","outputId":"198a34e2-c743-4829-d651-452730ef953a","executionInfo":{"status":"ok","timestamp":1736932801165,"user_tz":-330,"elapsed":482,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"id":"PqbE-JAGtKAD","execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["type(14)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"57rQhnL0Q7Vs","executionInfo":{"status":"ok","timestamp":1736932840669,"user_tz":-330,"elapsed":462,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"676c2705-fac4-4c6e-8bb4-d856dd893383"},"id":"57rQhnL0Q7Vs","execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["int"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["print(\"harjas\", type(\"harjas\"))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_IGzx8mRHb9","executionInfo":{"status":"ok","timestamp":1736932941985,"user_tz":-330,"elapsed":464,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"4c2074a8-0952-4a97-b870-e63d9db1cdc7"},"id":"V_IGzx8mRHb9","execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["harjas <class 'str'>\n"]}]},{"cell_type":"code","execution_count":10,"id":"ee52359d","metadata":{"id":"ee52359d","outputId":"1e6008c5-ed55-43bc-b942-8c3e47f09848","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736932983317,"user_tz":-330,"elapsed":466,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["42 <class 'int'>\n","3.14 <class 'float'>\n","(1+2j) <class 'complex'>\n","True <class 'bool'>\n","[1, 2, 3] <class 'list'>\n","(1, 2, 3) <class 'tuple'>\n","{'blue', 'red', 'green'} <class 'set'>\n","{'name': 'Alice', 'age': 42} <class 'dict'>\n","hello <class 'str'>\n"]}],"source":["print(42, type(42))\n","print(3.14, type(3.14))\n","print(1 + 2j, type(1 + 2j))\n","print(True, type(True))\n","print([1, 2, 3], type([1, 2, 3]))\n","print((1, 2, 3), type((1, 2, 3)))\n","print({'red', 'green', 'blue'}, type({'red', 'green', 'blue'}))\n","print({'name': 'Alice', 'age': 42}, type({'name': 'Alice', 'age': 42}))\n","print('hello', type('hello'))"]},{"cell_type":"markdown","source":["## how to print an output\n","\n","In python we can use the `print` method to as the name suggests print an output."],"metadata":{"id":"U4azFUsIgJlS"},"id":"U4azFUsIgJlS"},{"cell_type":"code","source":["help(print)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WnHVrdM8gMYV","executionInfo":{"status":"ok","timestamp":1736618070948,"user_tz":-330,"elapsed":640,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"59443b10-3340-4924-dbc0-08d3392ee3f8"},"id":"WnHVrdM8gMYV","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on built-in function print in module builtins:\n","\n","print(...)\n","    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n","    \n","    Prints the values to a stream, or to sys.stdout by default.\n","    Optional keyword arguments:\n","    file:  a file-like object (stream); defaults to the current sys.stdout.\n","    sep:   string inserted between values, default a space.\n","    end:   string appended after the last value, default a newline.\n","    flush: whether to forcibly flush the stream.\n","\n"]}]},{"cell_type":"markdown","id":"800d91e9","metadata":{"id":"800d91e9"},"source":["As we have seen above when used `help()` on the `print` It has four named or keyword arguments, which are optional because they all have default values, in addition to accepting a variable number of positional arguments.\n","\n","Let's first have a look on the `sep` keyword. Its default value is a single space (' '), and it stands for separator. It decides what value to use to connect items.\n","\n","It must either be a string or None, but None behaves just like the default space:"]},{"cell_type":"code","execution_count":11,"id":"162e0b87","metadata":{"id":"162e0b87","outputId":"2a66a6c2-11d7-42f4-87db-61af93933fe5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736933213800,"user_tz":-330,"elapsed":495,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["42 <class 'int'>\n"]}],"source":["# To show passing None as a value to sep gives\n","# the same output as the default value\n","print(42, type(42), sep=None)"]},{"cell_type":"code","source":["print('IoT', 'DS', 'ML',\"web\", sep=' ? ' )\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zYq46kAfuQ-U","outputId":"3efb1d0b-a171-4885-9ea1-c523d56c44c3","executionInfo":{"status":"ok","timestamp":1736933292498,"user_tz":-330,"elapsed":660,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"id":"zYq46kAfuQ-U","execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["IoT ? DS ? ML ? web\n"]}]},{"cell_type":"markdown","source":["#### Question: 1\n","#### Write a program to take name of the user as input and print it"],"metadata":{"id":"fiQVaxKqpy7L"},"id":"fiQVaxKqpy7L"},{"cell_type":"markdown","source":[],"metadata":{"id":"kUaofTKkS6pR"},"id":"kUaofTKkS6pR"},{"cell_type":"code","source":["print(42, type(42),'value 3', sep='\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bli4K-OFTTgy","executionInfo":{"status":"ok","timestamp":1736933525023,"user_tz":-330,"elapsed":443,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"d719192d-deb7-4986-e2ab-71187335a90e"},"id":"bli4K-OFTTgy","execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["42\n","<class 'int'>\n","value 3\n"]}]},{"cell_type":"code","execution_count":20,"id":"ef33e9d6","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ef33e9d6","outputId":"36091d62-69d3-4c99-ee9d-1a12d8588fb4","executionInfo":{"status":"ok","timestamp":1736933541164,"user_tz":-330,"elapsed":460,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["42 \n"," <class 'int'>\n","3.14 -> <class 'float'>\n","(1+2j) --> <class 'complex'>\n","True __ <class 'bool'>\n","[1, 2, 3] Type: <class 'list'>\n","(1, 2, 3), Type = <class 'tuple'>\n","{'blue', 'red', 'green'} -- <class 'set'>\n","{'name': 'Alice', 'age': 42} => <class 'dict'>\n","hello .... <class 'str'>\n"]}],"source":["# passing different values for sep\n","print(42, type(42), sep=' \\n ')\n","print(3.14, type(3.14), sep=' -> ')\n","print(1 + 2j, type(1 + 2j), sep=' --> ')\n","print(True, type(True), sep=' __ ')\n","print([1, 2, 3], type([1, 2, 3]), sep=' Type: ')\n","print((1, 2, 3), type((1, 2, 3)), sep=', Type = ')\n","print({'red', 'green', 'blue'}, type({'red', 'green', 'blue'}), sep=' -- ')\n","print({'name': 'Alice', 'age': 42}, type({'name': 'Alice', 'age': 42}), sep=' => ')\n","print('hello', type('hello'), sep=' .... ')"]},{"cell_type":"markdown","id":"5fa4c7b5","metadata":{"id":"5fa4c7b5"},"source":["Let's now have a look at the second keyword which is `end`. Its default value is newline character ('\\n'). It decides what value to use to end the line.\n","\n","It must either be a string or None, but None behaves just like the default space:"]},{"cell_type":"code","source":["print('Printing mutiple points')\n","print('Printing mutiple points')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3JDY26IAv0MF","outputId":"4454972e-d583-4265-d18e-684e6c646d30","executionInfo":{"status":"ok","timestamp":1736933584853,"user_tz":-330,"elapsed":487,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"id":"3JDY26IAv0MF","execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Printing mutiple points\n","Printing mutiple points\n"]}]},{"cell_type":"code","source":["print('Printing 1', end=' -> ')\n","print('Printing 2', end=' -> ')\n","print('->')\n","print('->')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zJUPRyTuviRp","outputId":"b63e4fbf-b726-4dbe-807d-ea62c1dbae17","executionInfo":{"status":"ok","timestamp":1736933643006,"user_tz":-330,"elapsed":433,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"id":"zJUPRyTuviRp","execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Printing 1 -> Printing 2 -> ->\n","->\n"]}]},{"cell_type":"code","execution_count":24,"id":"7ef1d70a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ef1d70a","outputId":"ea9b535c-5535-4b1f-cbfe-78458bd9246e","executionInfo":{"status":"ok","timestamp":1736933764463,"user_tz":-330,"elapsed":716,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Printing mutiple points\n"," * Statement 1\n"," * Statement 2\n"," * Statement 3 \n"," * \n","new line\n"]}],"source":["print('Printing mutiple points', end='\\n * ')\n","print('Statement 1', end='\\n * ')\n","print('Statement 2', end='\\n * ')\n","print('Statement 3 \\n * ')\n","print('new line')"]},{"cell_type":"markdown","id":"0256adab","metadata":{"id":"0256adab"},"source":["We can even use a mixture of `sep and end` keywords"]},{"cell_type":"markdown","source":["#### Question: 2\n","#### Use print statements to show the months in a sigle line seperated by comma \",\""],"metadata":{"id":"8vGyAd0jqHDT"},"id":"8vGyAd0jqHDT"},{"cell_type":"markdown","id":"288f3dc4","metadata":{"id":"288f3dc4"},"source":["# Comments and Docstrings\n","\n","Comments in python are used to improve the readability of the program. comments explain code in a language which is easy to understand, whereas `docstrings` describe what the code does it does not explain how it workds.\n","\n","\n","|Comments|Docstrings|\n","|--------|----------|\n","|Comments explain code in simple language.|Docstrings describes what the code does.|\n","|In Python, we can write comments using the hash (#) character.| We can write docstrings as string literals using the triple quotes (''').|\n","|Example: #This is a comment| Example: '''This is a docstring'''|\n","|There is no restriction on where to write a comment in Python.| We can write docstrings only for modules, classes, functions, and methods in Python.|\n","|Comments cannot be accessed from the Python shell.| We can access docstring using either the __doc__ attribute or\n","help() function.|\n","\n","Comments help all programmers (including us) understand the code in simple language.\n","\n","Docstrings in Python are written mainly for other programmers to know what the imported module, class, or function does.\n","\n","[blog](https://pencilprogrammer.com/comments-docstrings-difference/)"]},{"cell_type":"code","source":["# - comment\n","'''\n","docstring\n","'''\n","\n","\"\"\"\n","docstring\n","\"\"\""],"metadata":{"id":"_xuiuqJWyKoy","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1736934002277,"user_tz":-330,"elapsed":692,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"77920cec-b441-49c1-cf87-f66ecb1146d2"},"id":"_xuiuqJWyKoy","execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\ndocstring\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":29}]},{"cell_type":"code","execution_count":30,"id":"c5378d2f","metadata":{"id":"c5378d2f","executionInfo":{"status":"ok","timestamp":1736934062740,"user_tz":-330,"elapsed":483,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[],"source":["def sum_2_numbers(a = 0, b = 0):\n","    '''This method sums two numbers.\n","    Parameters:\n","        a (float): 1st operand\n","        b (float): 2nd operand\n","    '''\n","\n","    # add the given number\n","    s = a + b\n","    return s"]},{"cell_type":"code","execution_count":31,"id":"29875d3d","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"29875d3d","outputId":"d7b7f784-6245-4979-b666-35bd39d02ae8","executionInfo":{"status":"ok","timestamp":1736934065311,"user_tz":-330,"elapsed":438,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Help on function sum_2_numbers in module __main__:\n","\n","sum_2_numbers(a=0, b=0)\n","    This method sums two numbers.\n","    Parameters:\n","        a (float): 1st operand\n","        b (float): 2nd operand\n","\n"]}],"source":["# to get the docstring\n","help(sum_2_numbers)"]},{"cell_type":"markdown","id":"3ef05bf5","metadata":{"id":"3ef05bf5"},"source":["by using the help function we can access the `doc strings` but the same cannot be done for comments."]},{"cell_type":"markdown","id":"070c5c58","metadata":{"id":"070c5c58"},"source":["## Python Keywords\n","\n","Keywords are the reserved words in python, which can't be used as name of any entities like variables, classes and functions.\n","\n","These keywords are responsible for defining the syntax and structures of the python language"]},{"cell_type":"code","execution_count":null,"id":"112825fe","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"112825fe","outputId":"7a49513a-7c10-463c-99fa-839e7db8d4d1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Total Number of keywords in 35\n","['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n"]}],"source":["import keyword\n","\n","print(f\"Total Number of keywords in {len(keyword.kwlist)}\")\n","print(keyword.kwlist)"]},{"cell_type":"markdown","id":"7475bcdf","metadata":{"id":"7475bcdf"},"source":["## Python Identifiers\n","\n","The name we use to designate a variable, method, class, module, or other object is a Python Identifier. This means that whenever we give an entity a name, we are using an identifier.\n","\n","`Variable` and `identifier` are sometimes mistakenly thought to be the same thing, however they are separate. Let's define a variable first for the sake of clarity.\n","\n","A variable is something whose value can change over time, as the name suggests. In reality, a variable is a place in memory where a value can be kept. The value can be retrieved later and used. But in order to achieve it, we must assign that memory region a nickname so that we may use it as a shortcut and nickname is the identifier."]},{"cell_type":"markdown","id":"8e1c2e51","metadata":{"id":"8e1c2e51"},"source":["### Rules for Writing Identifiers\n","\n","For writing Identifiers, there are some guidelines. You must first understand that Python is case-sensitive. This indicates that in Python, Name and name are two separate identifiers. Here are some rules for writing Identifiers in python.\n","\n","  1. Identifiers may consist of a mix of capital and lowercase letters [A-Z a-z], digits [0-9], or an underscore ('_'). Hence, myVar, var_, and var_12 are all acceptable identifiers in Python.\n","  2. A digit cannot begin an identifier. Hence, var1 is valid whereas 1var is invalid.\n","  3. We can’t use special symbols like !,#,@,%,$ etc in our Identifier.\n","  4. There is no limit to the lenth of an identifier\n","\n","Even though these are hard rules for writing identifiers, there are some naming conventions that are recommended but not required.\n","\n","  1. Uppercase letters are used to begin class names. The first letter of every other identifier is lowercase.\n","  2. An identifier is considered private if it begins with a single leading underscore.\n","  3. If the identifier starts and ends with two underscores, than means the identifier is language-defined special name.\n","  4. Although c = 10 is acceptable, stating count = 10 would make more sense and make it simpler to understand what it accomplishes even when you go back to your code in the future.\n","  5. An underscore can be used to separate words in a variable name, as in this_is_a_variable."]},{"cell_type":"markdown","id":"6fe1ae66","metadata":{"id":"6fe1ae66"},"source":["### Assigning values to variables\n","\n","In Python, assigning values to variables is done using the `assignment operator`, which is indicated by the `\"=\"` symbol. The statement `x=1` assigns the value 1 to the variable `\"x\"`.\n","\n","A variable is more like a container to store the data in the computer’s memory, the name of the variable tells the computer where to find this value in the memory."]},{"cell_type":"code","source":["subject = 'xyz'\n","subject2 = \"Maths\""],"metadata":{"id":"qVy5CYiyz3Al","executionInfo":{"status":"ok","timestamp":1736934529854,"user_tz":-330,"elapsed":479,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"id":"qVy5CYiyz3Al","execution_count":34,"outputs":[]},{"cell_type":"code","source":["print(subject,type(subject))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5dYj500rXRhp","executionInfo":{"status":"ok","timestamp":1736934564691,"user_tz":-330,"elapsed":467,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"d874adbe-3c51-402d-b8c0-656c76a4f393"},"id":"5dYj500rXRhp","execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["xyz <class 'str'>\n"]}]},{"cell_type":"code","execution_count":37,"id":"d939d016","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d939d016","outputId":"a53d3cac-41be-49d1-d0f1-a85794d2b34f","executionInfo":{"status":"ok","timestamp":1736934607221,"user_tz":-330,"elapsed":444,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Value of x:  1 <class 'int'>\n","Value of y:  2 <class 'int'>\n","Value of z:  3\n"]}],"source":["# assiging values to variables\n","x=1\n","y=2\n","z=3\n","\n","print(\"Value of x: \", x,type(x))\n","print(\"Value of y: \", y,type(y))\n","print(\"Value of z: \", z)"]},{"cell_type":"code","execution_count":39,"id":"4dca50f6","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4dca50f6","outputId":"95746751-a8b2-4516-911b-2e8eef6e77bc","executionInfo":{"status":"ok","timestamp":1736934705892,"user_tz":-330,"elapsed":453,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Value of a:  4\n","Value of b:  5\n","Value of c:  6\n"]}],"source":["# Assiging multiple values in a single line\n","a, b, c,d = 4, 5, 6,8\n","\n","print(\"Value of a: \", a)\n","print(\"Value of b: \", b)\n","print(\"Value of c: \", c)"]},{"cell_type":"code","source":["name = input(\"Enter your name: \")\n","print(name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tHaDaj5PYMBk","executionInfo":{"status":"ok","timestamp":1736934779646,"user_tz":-330,"elapsed":4293,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"8cd48077-6d85-4e2a-d708-b4bc9318513b"},"id":"tHaDaj5PYMBk","execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter your name: harjas\n","harjas\n"]}]},{"cell_type":"markdown","id":"0296f56a","metadata":{"id":"0296f56a"},"source":["One cool feature of jupyter notebook is that it allows us to see all the in memory variables using the following magic command `%whos`."]},{"cell_type":"code","execution_count":43,"id":"1c5e3a7a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1c5e3a7a","outputId":"3ecbed94-9593-4212-f354-833245a35eb0","executionInfo":{"status":"ok","timestamp":1736934889276,"user_tz":-330,"elapsed":483,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Variable        Type        Data/Info\n","-------------------------------------\n","a               int         4\n","c               int         6\n","d               int         8\n","name            str         harjas\n","subject         str         xyz\n","subject2        str         Maths\n","sum_2_numbers   function    <function sum_2_numbers at 0x7a11d01c47c0>\n","x               int         1\n","y               int         2\n","z               int         3\n"]}],"source":["%whos"]},{"cell_type":"markdown","id":"55fed2f8","metadata":{"id":"55fed2f8"},"source":["A variable can be cleared from the notebook using the del function. Typing `del x` will clear the variable x from the working environment. If you want to remove all the variables in the jupyter notebook, you can use the magic command `%reset`."]},{"cell_type":"code","execution_count":45,"id":"24c16d11","metadata":{"id":"24c16d11","executionInfo":{"status":"ok","timestamp":1736934926652,"user_tz":-330,"elapsed":487,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}}},"outputs":[],"source":["del a"]},{"cell_type":"code","source":["%whos"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3-WJcqPhjkwY","executionInfo":{"status":"ok","timestamp":1736934930519,"user_tz":-330,"elapsed":432,"user":{"displayName":"Harjaspreet Singh","userId":"00860433275428673777"}},"outputId":"739e8eec-c28e-4f3f-b69b-7edbced02cac"},"id":"3-WJcqPhjkwY","execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Variable        Type        Data/Info\n","-------------------------------------\n","c               int         6\n","d               int         8\n","name            str         harjas\n","subject         str         xyz\n","subject2        str         Maths\n","sum_2_numbers   function    <function sum_2_numbers at 0x7a11d01c47c0>\n","x               int         1\n","y               int         2\n","z               int         3\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.16"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}