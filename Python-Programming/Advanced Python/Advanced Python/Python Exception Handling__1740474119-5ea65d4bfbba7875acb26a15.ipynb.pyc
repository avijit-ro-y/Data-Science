{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOi879jMsIcnFx17ZWZR3Qs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Python Exception Handling"],"metadata":{"id":"sOOf8cR8AOMx"}},{"cell_type":"code","source":["# Introduction\n","# Exception handling in Python allows us to deal with runtime errors gracefully\n","# Instead of crashing the program, we can take corrective actions\n","\n","def divide(a, b):\n","    result = a / b\n","    print(\"Result:\", result)\n","\n","divide(10, 2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MiCSa3bvAa7g","executionInfo":{"status":"ok","timestamp":1740374324948,"user_tz":-330,"elapsed":26,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"87bca08a-2176-4a8f-941a-4cd93f7dba2b"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Result: 5.0\n"]}]},{"cell_type":"code","source":["divide(10, 0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":263},"id":"97ix6YheAwIw","executionInfo":{"status":"error","timestamp":1740374335880,"user_tz":-330,"elapsed":79,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"22fccf3a-acdc-4518-8c1a-085f9c7080da"},"execution_count":2,"outputs":[{"output_type":"error","ename":"ZeroDivisionError","evalue":"division by zero","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-ccc290a9b5cb>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdivide\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-1-d0a6b5288356>\u001b[0m in \u001b[0;36mdivide\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mdivide\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Result:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"]}]},{"cell_type":"markdown","source":["## 1. Basic Exception Handling using try-except"],"metadata":{"id":"-FLq_VDiAWY4"}},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eV5h7Trf___N","executionInfo":{"status":"ok","timestamp":1740374457613,"user_tz":-330,"elapsed":25,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"0fe1d035-652b-4b74-efc1-98c4c55cb81b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Error: Cannot divide by zero!\n"]}],"source":["# Example: Handling ZeroDivisionError\n","def divide(a, b):\n","    try:\n","        result = a / b\n","        print(\"Result:\", result)\n","    except ZeroDivisionError:\n","        print(\"Error: Cannot divide by zero!\")\n","\n","divide(10, 0)"]},{"cell_type":"markdown","source":["## 2. Handling Multiple Exceptions"],"metadata":{"id":"H08T57DvA56a"}},{"cell_type":"code","source":["# Example: Handling multiple errors\n","def convert_to_int(value):\n","    try:\n","        result = int(value)\n","        print(\"Converted Value:\", result)\n","    except ValueError:\n","        print(\"Error: Cannot convert to integer!\")\n","    except TypeError:\n","        print(\"Error: Type mismatch!\")\n","\n","convert_to_int(\"abc\")\n","convert_to_int(None)\n","convert_to_int(\"123\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LQujsDunA6Ta","executionInfo":{"status":"ok","timestamp":1740374605696,"user_tz":-330,"elapsed":56,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"2f7ac4c4-1252-47bb-f590-586e047d0266"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Error: Cannot convert to integer!\n","Error: Type mismatch!\n","Converted Value: 123\n"]}]},{"cell_type":"markdown","source":["## 3. Using else and finally Blocks"],"metadata":{"id":"M51Fn5FuA_45"}},{"cell_type":"code","source":["# Example: Else runs if no exception occurs, finally runs always\n","def open_file(filename):\n","    try:\n","        file = open(filename, \"r\")\n","        content = file.read()\n","        print(\"File content:\", content)\n","    except FileNotFoundError:\n","        print(\"Error: File not found!\")\n","    else:\n","        # run if no exception\n","        print(\"File read successfully.\")\n","    finally:\n","        # run always (cleanup operations)\n","        print(\"Execution completed.\")\n","\n","open_file(\"non_existent_file.txt\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"whdABLGUA_ZT","executionInfo":{"status":"ok","timestamp":1740374751552,"user_tz":-330,"elapsed":42,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"c9d825f0-0f0d-4f02-c8b4-0f9a5189944c"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Error: File not found!\n","Execution completed.\n"]}]},{"cell_type":"markdown","source":["## 4. Raising Exceptions"],"metadata":{"id":"R-f4hUUhBFI6"}},{"cell_type":"code","source":["# Example: Raising an exception manually\n","def check_age(age):\n","    if age < 18:\n","        raise ValueError(\"Error: Age must be 18 or above.\")\n","    print(\"Access granted!\")\n","\n","try:\n","    check_age(20)\n","except ValueError as e:\n","    print(e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l126PjzxBEDL","executionInfo":{"status":"ok","timestamp":1740374970692,"user_tz":-330,"elapsed":8,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"1ecae8f4-d4d6-4a03-cf48-f2bbd05523ff"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Access granted!\n"]}]},{"cell_type":"markdown","source":["## 5. Creating Custom Exceptions"],"metadata":{"id":"DYhGDhdaBJaT"}},{"cell_type":"code","source":["ValueError.mro()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1RbyZSDybxML","executionInfo":{"status":"ok","timestamp":1740375019346,"user_tz":-330,"elapsed":19,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"2a9013f2-bb7b-41c1-8cce-448ea54cacec"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[ValueError, Exception, BaseException, object]"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# Example: Defining a custom exception class\n","class NegativeValueError(Exception):\n","    pass\n","\n","def square_root(number):\n","    if number < 0:\n","        raise NegativeValueError(\"Cannot take square root of a negative number!\")\n","    return number ** 0.5\n","\n","try:\n","    print(square_root(-9))\n","except NegativeValueError as e:\n","    print(e)\n","\n","print(square_root(16))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QqMbw-qDBIJ0","executionInfo":{"status":"ok","timestamp":1740375084556,"user_tz":-330,"elapsed":46,"user":{"displayName":"Manjeet Rohilla","userId":"03548678827150916360"}},"outputId":"34a35911-6c1a-436e-bce2-72b636d6cf06"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Cannot take square root of a negative number!\n","4.0\n"]}]},{"cell_type":"markdown","source":["## Conclusion\n","## Exception handling helps in preventing program crashes and enables graceful recovery"],"metadata":{"id":"s9RRSoY3BLcE"}}]}